// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	poller "github.com/crossnokaye/carbon/services/poller/gen/poller"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CheckDB provides a mock function with given fields: _a0, _a1
func (_m *Client) CheckDB(_a0 context.Context, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAggregateReports provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Client) GetAggregateReports(_a0 context.Context, _a1 []*poller.Period, _a2 string, _a3 string) ([]*poller.CarbonForecast, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*poller.CarbonForecast
	if rf, ok := ret.Get(0).(func(context.Context, []*poller.Period, string, string) []*poller.CarbonForecast); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*poller.CarbonForecast)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*poller.Period, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: _a0, _a1
func (_m *Client) Init(_a0 context.Context, _a1 bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Client) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *Client) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCarbonReports provides a mock function with given fields: _a0, _a1
func (_m *Client) SaveCarbonReports(_a0 context.Context, _a1 []*poller.CarbonForecast) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*poller.CarbonForecast) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
