// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Poller service
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/poller/design

package poller

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service that provides forecasts to clickhouse from Carbonara API
type Service interface {
	// query api getting search data for carbon_intensity event
	CarbonEmissions(context.Context) (res []*CarbonForecast, err error)
	// query api using a search call for a fuel event from Carbonara API
	Fuels(context.Context) (res []*FuelsForecast, err error)
	// get the aggregate data for an event from clickhouse
	AggregateDataEndpoint(context.Context) (res []*AggregateData, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Poller"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"carbon_emissions", "fuels", "aggregate_data"}

// aggregate data
type AggregateData struct {
	// average
	Average float64
	// min
	Min float64
	// max
	Max float64
	// sum
	Sum float64
	// count
	Count float64
	// duration
	Duration *Period
	// report_type
	ReportType string
}

// Emissions Forecast
type CarbonForecast struct {
	// generated_rate
	GeneratedRate float64
	// marginal_rate
	MarginalRate float64
	// consumed_rate
	ConsumedRate float64
	// duration
	Duration *Period
	// marginal_source
	MarginalSource string
	// consumed_source
	ConsumedSource string
	// generated_source
	GeneratedSource string
	// emission_factor
	EmissionFactor string
	// region
	Region string
}

// Generated Fuel Mix
type Fuel struct {
	// MW
	Mw float64
}

// Generated Fuel Mix
type FuelMix struct {
	// Fuels
	Fuels []*Fuel
	// aggregate_data
	AggregateData *AggregateData
}

// Emissions Forecast
type FuelsForecast struct {
	// fuels
	Fuels *FuelMix
	// duration
	Duration *Period
	// marginal_source
	MarginalSource string
	// generated_source
	GeneratedSource string
	// report_type
	ReportType string
}

// Period of time from start to end of Forecast
type Period struct {
	// Start time
	StartTime string
	// End time
	EndTime string
}

// MakeDataNotAvailable builds a goa.ServiceError from an error.
func MakeDataNotAvailable(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "data_not_available",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeMissingRequiredParameter builds a goa.ServiceError from an error.
func MakeMissingRequiredParameter(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "missing-required-parameter",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
