// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Poller gRPC client CLI support package
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/poller/design

package cli

import (
	"flag"
	"fmt"
	"os"

	pollerc "github.com/crossnokaye/carbon/services/poller/gen/grpc/poller/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `poller (carbon-emissions|aggregate-data)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` poller carbon-emissions --message '{
      "region": "Minus dolores.",
      "start": "2020-01-01T00:00:00Z"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		pollerFlags = flag.NewFlagSet("poller", flag.ContinueOnError)

		pollerCarbonEmissionsFlags       = flag.NewFlagSet("carbon-emissions", flag.ExitOnError)
		pollerCarbonEmissionsMessageFlag = pollerCarbonEmissionsFlags.String("message", "", "")

		pollerAggregateDataFlags       = flag.NewFlagSet("aggregate-data", flag.ExitOnError)
		pollerAggregateDataMessageFlag = pollerAggregateDataFlags.String("message", "", "")
	)
	pollerFlags.Usage = pollerUsage
	pollerCarbonEmissionsFlags.Usage = pollerCarbonEmissionsUsage
	pollerAggregateDataFlags.Usage = pollerAggregateDataUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "poller":
			svcf = pollerFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "poller":
			switch epn {
			case "carbon-emissions":
				epf = pollerCarbonEmissionsFlags

			case "aggregate-data":
				epf = pollerAggregateDataFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "poller":
			c := pollerc.NewClient(cc, opts...)
			switch epn {
			case "carbon-emissions":
				endpoint = c.CarbonEmissions()
				data, err = pollerc.BuildCarbonEmissionsPayload(*pollerCarbonEmissionsMessageFlag)
			case "aggregate-data":
				endpoint = c.AggregateData()
				data, err = pollerc.BuildAggregateDataPayload(*pollerAggregateDataMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// pollerUsage displays the usage of the poller command and its subcommands.
func pollerUsage() {
	fmt.Fprintf(os.Stderr, `Service that provides forecasts to clickhouse from Carbonara API
Usage:
    %[1]s [globalflags] poller COMMAND [flags]

COMMAND:
    carbon-emissions: query api getting search data for carbon_intensity event. Return reports in 5 minute intervals
    aggregate-data: convert 5 minute reports into hourly, daily, monthly, yearly reports using clickhouse aggregate queries

Additional help:
    %[1]s poller COMMAND --help
`, os.Args[0])
}
func pollerCarbonEmissionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] poller carbon-emissions -message JSON

query api getting search data for carbon_intensity event. Return reports in 5 minute intervals
    -message JSON: 

Example:
    %[1]s poller carbon-emissions --message '{
      "region": "Minus dolores.",
      "start": "2020-01-01T00:00:00Z"
   }'
`, os.Args[0])
}

func pollerAggregateDataUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] poller aggregate-data -message JSON

convert 5 minute reports into hourly, daily, monthly, yearly reports using clickhouse aggregate queries
    -message JSON: 

Example:
    %[1]s poller aggregate-data --message '{
      "duration": "Dolores quia magni veniam quidem sapiente architecto.",
      "periods": [
         {
            "endTime": "2020-01-01T00:00:00Z",
            "startTime": "2020-01-01T00:00:00Z"
         },
         {
            "endTime": "2020-01-01T00:00:00Z",
            "startTime": "2020-01-01T00:00:00Z"
         }
      ],
      "region": "Rerum nisi quisquam reiciendis aliquam pariatur sit."
   }'
`, os.Args[0])
}
