// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Poller gRPC server
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/poller/design -o
// services/poller

package server

import (
	"context"
	"errors"

	pollerpb "github.com/crossnokaye/carbon/services/poller/gen/grpc/poller/pb"
	poller "github.com/crossnokaye/carbon/services/poller/gen/poller"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the pollerpb.PollerServer interface.
type Server struct {
	UpdateH                goagrpc.UnaryHandler
	GetEmissionsForRegionH goagrpc.UnaryHandler
	pollerpb.UnimplementedPollerServer
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the Poller service endpoints.
func New(e *poller.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		UpdateH:                NewUpdateHandler(e.Update, uh),
		GetEmissionsForRegionH: NewGetEmissionsForRegionHandler(e.GetEmissionsForRegion, uh),
	}
}

// NewUpdateHandler creates a gRPC handler which serves the "Poller" service
// "update" endpoint.
func NewUpdateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeUpdateResponse)
	}
	return h
}

// Update implements the "Update" method in pollerpb.PollerServer interface.
func (s *Server) Update(ctx context.Context, message *pollerpb.UpdateRequest) (*pollerpb.UpdateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "update")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Poller")
	resp, err := s.UpdateH.Handle(ctx, message)
	if err != nil {
		var en ErrorNamer
		if errors.As(err, &en) {
			switch en.ErrorName() {
			case "clickhouse_error":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "server_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			case "no_data_error":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*pollerpb.UpdateResponse), nil
}

// NewGetEmissionsForRegionHandler creates a gRPC handler which serves the
// "Poller" service "get_emissions_for_region" endpoint.
func NewGetEmissionsForRegionHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetEmissionsForRegionRequest, EncodeGetEmissionsForRegionResponse)
	}
	return h
}

// GetEmissionsForRegion implements the "GetEmissionsForRegion" method in
// pollerpb.PollerServer interface.
func (s *Server) GetEmissionsForRegion(ctx context.Context, message *pollerpb.GetEmissionsForRegionRequest) (*pollerpb.GetEmissionsForRegionResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "get_emissions_for_region")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Poller")
	resp, err := s.GetEmissionsForRegionH.Handle(ctx, message)
	if err != nil {
		var en ErrorNamer
		if errors.As(err, &en) {
			switch en.ErrorName() {
			case "no_data":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "server_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*pollerpb.GetEmissionsForRegionResponse), nil
}
