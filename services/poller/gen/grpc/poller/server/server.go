// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Poller gRPC server
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/poller/design

package server

import (
	"context"

	pollerpb "github.com/crossnokaye/carbon/services/poller/gen/grpc/poller/pb"
	poller "github.com/crossnokaye/carbon/services/poller/gen/poller"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the pollerpb.PollerServer interface.
type Server struct {
	CarbonEmissionsH       goagrpc.UnaryHandler
	AggregateDataEndpointH goagrpc.UnaryHandler
	pollerpb.UnimplementedPollerServer
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the Poller service endpoints.
func New(e *poller.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		CarbonEmissionsH:       NewCarbonEmissionsHandler(e.CarbonEmissions, uh),
		AggregateDataEndpointH: NewAggregateDataEndpointHandler(e.AggregateDataEndpoint, uh),
	}
}

// NewCarbonEmissionsHandler creates a gRPC handler which serves the "Poller"
// service "carbon_emissions" endpoint.
func NewCarbonEmissionsHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCarbonEmissionsRequest, EncodeCarbonEmissionsResponse)
	}
	return h
}

// CarbonEmissions implements the "CarbonEmissions" method in
// pollerpb.PollerServer interface.
func (s *Server) CarbonEmissions(ctx context.Context, message *pollerpb.CarbonEmissionsRequest) (*pollerpb.CarbonEmissionsResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "carbon_emissions")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Poller")
	resp, err := s.CarbonEmissionsH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*pollerpb.CarbonEmissionsResponse), nil
}

// NewAggregateDataEndpointHandler creates a gRPC handler which serves the
// "Poller" service "aggregate_data" endpoint.
func NewAggregateDataEndpointHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeAggregateDataEndpointResponse)
	}
	return h
}

// AggregateDataEndpoint implements the "AggregateDataEndpoint" method in
// pollerpb.PollerServer interface.
func (s *Server) AggregateDataEndpoint(ctx context.Context, message *pollerpb.AggregateDataRequest) (*pollerpb.AggregateDataResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "aggregate_data")
	ctx = context.WithValue(ctx, goa.ServiceKey, "Poller")
	resp, err := s.AggregateDataEndpointH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*pollerpb.AggregateDataResponse), nil
}
