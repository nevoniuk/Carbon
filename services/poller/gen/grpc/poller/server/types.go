// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Poller gRPC server types
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/poller/design

package server

import (
	pollerpb "github.com/crossnokaye/carbon/services/poller/gen/grpc/poller/pb"
	poller "github.com/crossnokaye/carbon/services/poller/gen/poller"
	goa "goa.design/goa/v3/pkg"
)

// NewCarbonEmissionsPayload builds the payload of the "carbon_emissions"
// endpoint of the "Poller" service from the gRPC request type.
func NewCarbonEmissionsPayload(message *pollerpb.CarbonEmissionsRequest) *poller.CarbonPayload {
	v := &poller.CarbonPayload{}
	if message.Region != "" {
		v.Region = &message.Region
	}
	if message.Start != "" {
		v.Start = &message.Start
	}
	return v
}

// NewProtoCarbonEmissionsResponse builds the gRPC response type from the
// result of the "carbon_emissions" endpoint of the "Poller" service.
func NewProtoCarbonEmissionsResponse(result []*poller.CarbonForecast) *pollerpb.CarbonEmissionsResponse {
	message := &pollerpb.CarbonEmissionsResponse{}
	message.Field = make([]*pollerpb.CarbonForecast, len(result))
	for i, val := range result {
		message.Field[i] = &pollerpb.CarbonForecast{
			GeneratedRate:   val.GeneratedRate,
			MarginalRate:    val.MarginalRate,
			ConsumedRate:    val.ConsumedRate,
			GeneratedSource: val.GeneratedSource,
			Region:          val.Region,
		}
		if val.Duration != nil {
			message.Field[i].Duration = svcPollerPeriodToPollerpbPeriod(val.Duration)
		}
	}
	return message
}

// NewAggregateDataPayload builds the payload of the "aggregate_data" endpoint
// of the "Poller" service from the gRPC request type.
func NewAggregateDataPayload(message *pollerpb.AggregateDataRequest) *poller.AggregatePayload {
	v := &poller.AggregatePayload{}
	if message.Region != "" {
		v.Region = &message.Region
	}
	if message.Periods != nil {
		v.Periods = make([]*poller.Period, len(message.Periods))
		for i, val := range message.Periods {
			v.Periods[i] = &poller.Period{
				StartTime: val.StartTime,
				EndTime:   val.EndTime,
			}
		}
	}
	return v
}

// NewProtoAggregateDataResponse builds the gRPC response type from the result
// of the "aggregate_data" endpoint of the "Poller" service.
func NewProtoAggregateDataResponse() *pollerpb.AggregateDataResponse {
	message := &pollerpb.AggregateDataResponse{}
	return message
}

// ValidateCarbonEmissionsRequest runs the validations defined on
// CarbonEmissionsRequest.
func ValidateCarbonEmissionsRequest(message *pollerpb.CarbonEmissionsRequest) (err error) {
	if message.Start != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.start", message.Start, goa.FormatDateTime))
	}
	return
}

// ValidatePeriod runs the validations defined on Period.
func ValidatePeriod(message *pollerpb.Period) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.startTime", message.StartTime, goa.FormatDateTime))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.endTime", message.EndTime, goa.FormatDateTime))

	return
}

// ValidateAggregateDataRequest runs the validations defined on
// AggregateDataRequest.
func ValidateAggregateDataRequest(message *pollerpb.AggregateDataRequest) (err error) {
	for _, e := range message.Periods {
		if e != nil {
			if err2 := ValidatePeriod(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// svcPollerPeriodToPollerpbPeriod builds a value of type *pollerpb.Period from
// a value of type *poller.Period.
func svcPollerPeriodToPollerpbPeriod(v *poller.Period) *pollerpb.Period {
	res := &pollerpb.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}

// protobufPollerpbPeriodToPollerPeriod builds a value of type *poller.Period
// from a value of type *pollerpb.Period.
func protobufPollerpbPeriodToPollerPeriod(v *pollerpb.Period) *poller.Period {
	res := &poller.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}
