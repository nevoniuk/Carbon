// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Poller gRPC server types
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/poller/design

package server

import (
	pollerpb "github.com/crossnokaye/carbon/services/poller/gen/grpc/poller/pb"
	poller "github.com/crossnokaye/carbon/services/poller/gen/poller"
)

// NewCarbonEmissionsPayload builds the payload of the "carbon_emissions"
// endpoint of the "Poller" service from the gRPC request type.
func NewCarbonEmissionsPayload(message *pollerpb.CarbonEmissionsRequest) string {
	v := message.Field
	return v
}

// NewProtoCarbonEmissionsResponse builds the gRPC response type from the
// result of the "carbon_emissions" endpoint of the "Poller" service.
func NewProtoCarbonEmissionsResponse(result []*poller.CarbonForecast) *pollerpb.CarbonEmissionsResponse {
	message := &pollerpb.CarbonEmissionsResponse{}
	message.Field = make([]*pollerpb.CarbonForecast, len(result))
	for i, val := range result {
		message.Field[i] = &pollerpb.CarbonForecast{
			GeneratedRate:   val.GeneratedRate,
			MarginalRate:    val.MarginalRate,
			ConsumedRate:    val.ConsumedRate,
			GeneratedSource: val.GeneratedSource,
			Region:          val.Region,
		}
		if val.Duration != nil {
			message.Field[i].Duration = svcPollerPeriodToPollerpbPeriod(val.Duration)
		}
	}
	return message
}

// NewAggregateDataPayload builds the payload of the "aggregate_data" endpoint
// of the "Poller" service from the gRPC request type.
func NewAggregateDataPayload(message *pollerpb.AggregateDataRequest) string {
	v := message.Field
	return v
}

// NewProtoAggregateDataResponse builds the gRPC response type from the result
// of the "aggregate_data" endpoint of the "Poller" service.
func NewProtoAggregateDataResponse() *pollerpb.AggregateDataResponse {
	message := &pollerpb.AggregateDataResponse{}
	return message
}

// svcPollerPeriodToPollerpbPeriod builds a value of type *pollerpb.Period from
// a value of type *poller.Period.
func svcPollerPeriodToPollerpbPeriod(v *poller.Period) *pollerpb.Period {
	res := &pollerpb.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}

// protobufPollerpbPeriodToPollerPeriod builds a value of type *poller.Period
// from a value of type *pollerpb.Period.
func protobufPollerpbPeriodToPollerPeriod(v *pollerpb.Period) *poller.Period {
	res := &poller.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}
