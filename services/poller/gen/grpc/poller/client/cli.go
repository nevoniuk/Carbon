// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Poller gRPC client CLI support package
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/poller/design

package client

import (
	"encoding/json"
	"fmt"

	pollerpb "github.com/crossnokaye/carbon/services/poller/gen/grpc/poller/pb"
	poller "github.com/crossnokaye/carbon/services/poller/gen/poller"
)

// BuildCarbonEmissionsPayload builds the payload for the Poller
// carbon_emissions endpoint from CLI flags.
func BuildCarbonEmissionsPayload(pollerCarbonEmissionsMessage string) (*poller.CarbonPayload, error) {
	var err error
	var message pollerpb.CarbonEmissionsRequest
	{
		if pollerCarbonEmissionsMessage != "" {
			err = json.Unmarshal([]byte(pollerCarbonEmissionsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"region\": \"Minus dolores.\",\n      \"start\": \"2020-01-01T00:00:00Z\"\n   }'")
			}
		}
	}
	v := &poller.CarbonPayload{}
	if message.Region != "" {
		v.Region = &message.Region
	}
	if message.Start != "" {
		v.Start = &message.Start
	}

	return v, nil
}

// BuildAggregateDataPayload builds the payload for the Poller aggregate_data
// endpoint from CLI flags.
func BuildAggregateDataPayload(pollerAggregateDataMessage string) (*poller.AggregatePayload, error) {
	var err error
	var message pollerpb.AggregateDataRequest
	{
		if pollerAggregateDataMessage != "" {
			err = json.Unmarshal([]byte(pollerAggregateDataMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"duration\": \"Dolores quia magni veniam quidem sapiente architecto.\",\n      \"periods\": [\n         {\n            \"endTime\": \"2020-01-01T00:00:00Z\",\n            \"startTime\": \"2020-01-01T00:00:00Z\"\n         },\n         {\n            \"endTime\": \"2020-01-01T00:00:00Z\",\n            \"startTime\": \"2020-01-01T00:00:00Z\"\n         }\n      ],\n      \"region\": \"Rerum nisi quisquam reiciendis aliquam pariatur sit.\"\n   }'")
			}
		}
	}
	v := &poller.AggregatePayload{}
	if message.Region != "" {
		v.Region = &message.Region
	}
	if message.Duration != "" {
		v.Duration = &message.Duration
	}
	if message.Periods != nil {
		v.Periods = make([]*poller.Period, len(message.Periods))
		for i, val := range message.Periods {
			v.Periods[i] = &poller.Period{
				StartTime: val.StartTime,
				EndTime:   val.EndTime,
			}
		}
	}

	return v, nil
}
