// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Poller gRPC client CLI support package
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/poller/design

package client

import (
	"encoding/json"
	"fmt"

	pollerpb "github.com/crossnokaye/carbon/services/poller/gen/grpc/poller/pb"
)

// BuildCarbonEmissionsPayload builds the payload for the Poller
// carbon_emissions endpoint from CLI flags.
func BuildCarbonEmissionsPayload(pollerCarbonEmissionsMessage string) (string, error) {
	var err error
	var message pollerpb.CarbonEmissionsRequest
	{
		if pollerCarbonEmissionsMessage != "" {
			err = json.Unmarshal([]byte(pollerCarbonEmissionsMessage), &message)
			if err != nil {
				var zero string
				return zero, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"field\": \"Aut sit inventore itaque est.\"\n   }'")
			}
		}
	}
	v := message.Field
	return v, nil
}

// BuildAggregateDataPayload builds the payload for the Poller aggregate_data
// endpoint from CLI flags.
func BuildAggregateDataPayload(pollerAggregateDataMessage string) (string, error) {
	var err error
	var message pollerpb.AggregateDataRequest
	{
		if pollerAggregateDataMessage != "" {
			err = json.Unmarshal([]byte(pollerAggregateDataMessage), &message)
			if err != nil {
				var zero string
				return zero, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"field\": \"Adipisci non rerum nisi quisquam.\"\n   }'")
			}
		}
	}
	v := message.Field
	return v, nil
}
