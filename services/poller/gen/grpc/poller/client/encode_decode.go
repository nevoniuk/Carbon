// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Poller gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/poller/design

package client

import (
	"context"

	pollerpb "github.com/crossnokaye/carbon/services/poller/gen/grpc/poller/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildCarbonEmissionsFunc builds the remote method to invoke for "Poller"
// service "carbon_emissions" endpoint.
func BuildCarbonEmissionsFunc(grpccli pollerpb.PollerClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CarbonEmissions(ctx, reqpb.(*pollerpb.CarbonEmissionsRequest), opts...)
		}
		return grpccli.CarbonEmissions(ctx, &pollerpb.CarbonEmissionsRequest{}, opts...)
	}
}

// EncodeCarbonEmissionsRequest encodes requests sent to Poller
// carbon_emissions endpoint.
func EncodeCarbonEmissionsRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.([]string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Poller", "carbon_emissions", "[]string", v)
	}
	return NewProtoCarbonEmissionsRequest(payload), nil
}

// DecodeCarbonEmissionsResponse decodes responses from the Poller
// carbon_emissions endpoint.
func DecodeCarbonEmissionsResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*pollerpb.CarbonEmissionsResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Poller", "carbon_emissions", "*pollerpb.CarbonEmissionsResponse", v)
	}
	if err := ValidateCarbonEmissionsResponse(message); err != nil {
		return nil, err
	}
	res := NewCarbonEmissionsResult(message)
	return res, nil
}

// BuildAggregateDataEndpointFunc builds the remote method to invoke for
// "Poller" service "aggregate_data" endpoint.
func BuildAggregateDataEndpointFunc(grpccli pollerpb.PollerClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.AggregateDataEndpoint(ctx, reqpb.(*pollerpb.AggregateDataRequest), opts...)
		}
		return grpccli.AggregateDataEndpoint(ctx, &pollerpb.AggregateDataRequest{}, opts...)
	}
}

// EncodeAggregateDataEndpointRequest encodes requests sent to Poller
// aggregate_data endpoint.
func EncodeAggregateDataEndpointRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.([]string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Poller", "aggregate_data", "[]string", v)
	}
	return NewProtoAggregateDataRequest(payload), nil
}

// DecodeAggregateDataEndpointResponse decodes responses from the Poller
// aggregate_data endpoint.
func DecodeAggregateDataEndpointResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*pollerpb.AggregateDataResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Poller", "aggregate_data", "*pollerpb.AggregateDataResponse", v)
	}
	if err := ValidateAggregateDataResponse(message); err != nil {
		return nil, err
	}
	res := NewAggregateDataResult(message)
	return res, nil
}
