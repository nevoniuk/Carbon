// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Poller gRPC client types
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/poller/design -o
// services/poller

package client

import (
	pollerpb "github.com/crossnokaye/carbon/services/poller/gen/grpc/poller/pb"
	poller "github.com/crossnokaye/carbon/services/poller/gen/poller"
	goa "goa.design/goa/v3/pkg"
)

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "Poller" service.
func NewProtoUpdateRequest(payload *poller.UpdatePayload) *pollerpb.UpdateRequest {
	message := &pollerpb.UpdateRequest{
		StartTime: payload.StartTime,
		EndTime:   payload.EndTime,
		Region:    payload.Region,
	}
	return message
}

// NewProtoGetEmissionsForRegionRequest builds the gRPC request type from the
// payload of the "get_emissions_for_region" endpoint of the "Poller" service.
func NewProtoGetEmissionsForRegionRequest(payload *poller.CarbonPayload) *pollerpb.GetEmissionsForRegionRequest {
	message := &pollerpb.GetEmissionsForRegionRequest{
		Region: payload.Region,
		Start:  payload.Start,
		End:    payload.End,
	}
	return message
}

// NewGetEmissionsForRegionResult builds the result type of the
// "get_emissions_for_region" endpoint of the "Poller" service from the gRPC
// response type.
func NewGetEmissionsForRegionResult(message *pollerpb.GetEmissionsForRegionResponse) []*poller.CarbonForecast {
	result := make([]*poller.CarbonForecast, len(message.Field))
	for i, val := range message.Field {
		result[i] = &poller.CarbonForecast{
			GeneratedRate: val.GeneratedRate,
			MarginalRate:  val.MarginalRate,
			ConsumedRate:  val.ConsumedRate,
			DurationType:  val.DurationType,
			Region:        val.Region,
		}
		if val.Duration != nil {
			result[i].Duration = protobufPollerpbPeriodToPollerPeriod(val.Duration)
		}
	}
	return result
}

// ValidateGetEmissionsForRegionResponse runs the validations defined on
// GetEmissionsForRegionResponse.
func ValidateGetEmissionsForRegionResponse(message *pollerpb.GetEmissionsForRegionResponse) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateCarbonForecast(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCarbonForecast runs the validations defined on CarbonForecast.
func ValidateCarbonForecast(message *pollerpb.CarbonForecast) (err error) {
	if message.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "message"))
	}
	if message.Duration != nil {
		if err2 := ValidatePeriod(message.Duration); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if !(message.DurationType == "minute" || message.DurationType == "hourly" || message.DurationType == "daily" || message.DurationType == "weekly" || message.DurationType == "monthly") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.duration_type", message.DurationType, []interface{}{"minute", "hourly", "daily", "weekly", "monthly"}))
	}
	if !(message.Region == "CAISO" || message.Region == "AESO" || message.Region == "BPA" || message.Region == "ERCO" || message.Region == "IESO" || message.Region == "ISONE" || message.Region == "MISO" || message.Region == "NYISO" || message.Region == "NYISO.NYCW" || message.Region == "NYISO.NYLI" || message.Region == "NYISO.NYUP" || message.Region == "PJM" || message.Region == "SPP") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.region", message.Region, []interface{}{"CAISO", "AESO", "BPA", "ERCO", "IESO", "ISONE", "MISO", "NYISO", "NYISO.NYCW", "NYISO.NYLI", "NYISO.NYUP", "PJM", "SPP"}))
	}
	return
}

// ValidatePeriod runs the validations defined on Period.
func ValidatePeriod(message *pollerpb.Period) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.start_time", message.StartTime, goa.FormatDateTime))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.end_time", message.EndTime, goa.FormatDateTime))

	return
}

// svcPollerPeriodToPollerpbPeriod builds a value of type *pollerpb.Period from
// a value of type *poller.Period.
func svcPollerPeriodToPollerpbPeriod(v *poller.Period) *pollerpb.Period {
	res := &pollerpb.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}

// protobufPollerpbPeriodToPollerPeriod builds a value of type *poller.Period
// from a value of type *pollerpb.Period.
func protobufPollerpbPeriodToPollerPeriod(v *pollerpb.Period) *poller.Period {
	res := &poller.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}
