// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pollerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PollerClient is the client API for Poller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PollerClient interface {
	// query Singularity's search endpoint and convert 5 min interval reports into
	// averages
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// query search endpoint for a region.
	GetEmissionsForRegion(ctx context.Context, in *GetEmissionsForRegionRequest, opts ...grpc.CallOption) (*GetEmissionsForRegionResponse, error)
}

type pollerClient struct {
	cc grpc.ClientConnInterface
}

func NewPollerClient(cc grpc.ClientConnInterface) PollerClient {
	return &pollerClient{cc}
}

func (c *pollerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/poller.Poller/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollerClient) GetEmissionsForRegion(ctx context.Context, in *GetEmissionsForRegionRequest, opts ...grpc.CallOption) (*GetEmissionsForRegionResponse, error) {
	out := new(GetEmissionsForRegionResponse)
	err := c.cc.Invoke(ctx, "/poller.Poller/GetEmissionsForRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PollerServer is the server API for Poller service.
// All implementations must embed UnimplementedPollerServer
// for forward compatibility
type PollerServer interface {
	// query Singularity's search endpoint and convert 5 min interval reports into
	// averages
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// query search endpoint for a region.
	GetEmissionsForRegion(context.Context, *GetEmissionsForRegionRequest) (*GetEmissionsForRegionResponse, error)
	mustEmbedUnimplementedPollerServer()
}

// UnimplementedPollerServer must be embedded to have forward compatible implementations.
type UnimplementedPollerServer struct {
}

func (UnimplementedPollerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPollerServer) GetEmissionsForRegion(context.Context, *GetEmissionsForRegionRequest) (*GetEmissionsForRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmissionsForRegion not implemented")
}
func (UnimplementedPollerServer) mustEmbedUnimplementedPollerServer() {}

// UnsafePollerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PollerServer will
// result in compilation errors.
type UnsafePollerServer interface {
	mustEmbedUnimplementedPollerServer()
}

func RegisterPollerServer(s grpc.ServiceRegistrar, srv PollerServer) {
	s.RegisterService(&Poller_ServiceDesc, srv)
}

func _Poller_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poller.Poller/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poller_GetEmissionsForRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmissionsForRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollerServer).GetEmissionsForRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poller.Poller/GetEmissionsForRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollerServer).GetEmissionsForRegion(ctx, req.(*GetEmissionsForRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Poller_ServiceDesc is the grpc.ServiceDesc for Poller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Poller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poller.Poller",
	HandlerType: (*PollerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Poller_Update_Handler,
		},
		{
			MethodName: "GetEmissionsForRegion",
			Handler:    _Poller_GetEmissionsForRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goadesign_goagen_poller.proto",
}
