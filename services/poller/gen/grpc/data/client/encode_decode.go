// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Data gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/poller/design

package client

import (
	"context"

	datapb "github.com/crossnokaye/carbon/gen/grpc/data/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
)

// BuildCarbonEmissionsFunc builds the remote method to invoke for "Data"
// service "carbon_emissions" endpoint.
func BuildCarbonEmissionsFunc(grpccli datapb.DataClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CarbonEmissions(ctx, reqpb.(*datapb.CarbonEmissionsRequest), opts...)
		}
		return grpccli.CarbonEmissions(ctx, &datapb.CarbonEmissionsRequest{}, opts...)
	}
}

// BuildFuelsFunc builds the remote method to invoke for "Data" service "fuels"
// endpoint.
func BuildFuelsFunc(grpccli datapb.DataClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Fuels(ctx, reqpb.(*datapb.FuelsRequest), opts...)
		}
		return grpccli.Fuels(ctx, &datapb.FuelsRequest{}, opts...)
	}
}

// BuildAggregateDataFunc builds the remote method to invoke for "Data" service
// "aggregate_data" endpoint.
func BuildAggregateDataFunc(grpccli datapb.DataClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.AggregateData(ctx, reqpb.(*datapb.AggregateDataRequest), opts...)
		}
		return grpccli.AggregateData(ctx, &datapb.AggregateDataRequest{}, opts...)
	}
}
