// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc service
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design -o services/calc

package calc

import (
	"context"
)

// Service to interpret CO2 emissions through power and carbon intensity data
type Service interface {
	// This endpoint is used by a front end service to return carbon emission
	// reports
	HandleRequests(context.Context, *RequestPayload) (res *AllReports, err error)
	// Make reports available to external/R&D clients
	GetCarbonReport(context.Context) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "calc"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"handle_requests", "get_carbon_report"}

// AllReports is the result type of the calc service handle_requests method.
type AllReports struct {
	// CarbonIntensityReports
	CarbonIntensityReports []*CarbonReport
	// PowerReports
	PowerReports []*ElectricalReport
	// TotalEmissionReport
	TotalEmissionReport *EmissionsReport
}

// Carbon Report from clickhouse
type CarbonReport struct {
	// This is in units of (lbs of CO2/MWh)
	GeneratedRate float64
	// Duration
	Duration *Period
	// DurationType
	DurationType string
	// As found in the Enums section of the Poller service in the URL above
	Region string
}

// Contains carbon emissions in terms of DataPoints, which can be used as
// points for a time/CO2 emissions graph
type DataPoint struct {
	// Time
	Time string
	// carbon footprint is the lbs of CO2 emissions
	CarbonFootprint float64
}

// Energy Generation Report from the Past values function GetValues
type ElectricalReport struct {
	// Duration
	Duration *Period
	// OrgID
	OrgID UUID
	// AgentID
	AgentID string
	// Power meter data in KWh
	GeneratedRate float64
	// IntervalType
	IntervalType string
	// FacilityID
	FacilityID string
}

// Carbon/Energy Generation Report
type EmissionsReport struct {
	// Duration
	Duration *Period
	// DurationType
	DurationType string
	// Points
	Points []*DataPoint
	// OrgID
	OrgID UUID
	// AgentID
	AgentID string
	// FacilityID
	FacilityID string
}

// Period of time from start to end for any report type
type Period struct {
	// Start time
	StartTime string
	// End time
	EndTime string
}

// RequestPayload is the payload type of the calc service handle_requests
// method.
type RequestPayload struct {
	// OrgID
	OrgID UUID
	// Duration
	Duration *Period
	// AgentID
	AgentID string
	// FacilityID
	FacilityID string
	// Interval
	Interval string
}

// Universally unique identifier
type UUID string
