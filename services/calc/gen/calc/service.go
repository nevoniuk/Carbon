// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc service
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design

package calc

import (
	"context"
)

// Service to interpret CO2 emissions through power and carbon intensity data
type Service interface {
	// This endpoint is used by a front end service to return energy usage
	// information
	HandleRequests(context.Context, *RequestPayload) (res *AllReports, err error)
	// Make reports available to external/R&D clients
	CarbonReportEndpoint(context.Context) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "calc"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"handle_requests", "carbon_report"}

// AllReports is the result type of the calc service handle_requests method.
type AllReports struct {
	// carbon_intensity_reports
	CarbonIntensityReports []*CarbonReport
	// power_reports
	PowerReports []*ElectricalReport
	// total_emission_reports
	TotalEmissionReports []*EmissionsReport
}

// Carbon Report from clickhouse
type CarbonReport struct {
	// generated_rate
	GeneratedRate float64
	// Duration
	Duration *Period
	// duration_type
	DurationType string
	// region
	Region string
}

// Contains a time stamp with its respective x-y coordinates
type DataPoint struct {
	// time
	Time string
	// carbon_rate
	CarbonRate float64
}

// Energy Generation Report
type ElectricalReport struct {
	// period
	Period *Period
	// postalcode
	Postalcode string
	// facility
	Facility UUID
	// building
	Building UUID
	// stamp
	Stamp []*PowerStamp
	// intervalType
	IntervalType string
}

// Carbon/Energy Generation Report
type EmissionsReport struct {
	// Duration
	Duration *Period
	// duration_type
	DurationType string
	// point
	Point []*DataPoint
	// facility
	Facility UUID
}

// Period of time from start to end of Forecast
type Period struct {
	// Start time
	StartTime string
	// End time
	EndTime string
}

type PowerStamp struct {
	// time
	Time *string
	// power stamp in KW
	GenRate *float64
}

// RequestPayload is the payload type of the calc service handle_requests
// method.
type RequestPayload struct {
	// org
	Org UUID
	// Period
	Period *Period
	// building
	Building UUID
	// interval
	Interval string
}

// Universally unique identifier
type UUID string
