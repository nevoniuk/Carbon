// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc gRPC client
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design -o services/calc

package client

import (
	"context"

	calcpb "github.com/crossnokaye/carbon/services/calc/gen/grpc/calc/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli calcpb.CalcClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the calc service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: calcpb.NewCalcClient(cc),
		opts:    opts,
	}
}

// CalculateReports calls the "CalculateReports" function in calcpb.CalcClient
// interface.
func (c *Client) CalculateReports() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildCalculateReportsFunc(c.grpccli, c.opts...),
			EncodeCalculateReportsRequest,
			DecodeCalculateReportsResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// GetControlPoints calls the "GetControlPoints" function in calcpb.CalcClient
// interface.
func (c *Client) GetControlPoints() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGetControlPointsFunc(c.grpccli, c.opts...),
			EncodeGetControlPointsRequest,
			DecodeGetControlPointsResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// GetPower calls the "GetPower" function in calcpb.CalcClient interface.
func (c *Client) GetPower() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGetPowerFunc(c.grpccli, c.opts...),
			EncodeGetPowerRequest,
			DecodeGetPowerResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// GetEmissions calls the "GetEmissions" function in calcpb.CalcClient
// interface.
func (c *Client) GetEmissions() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGetEmissionsFunc(c.grpccli, c.opts...),
			EncodeGetEmissionsRequest,
			DecodeGetEmissionsResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// HandleRequests calls the "HandleRequests" function in calcpb.CalcClient
// interface.
func (c *Client) HandleRequests() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildHandleRequestsFunc(c.grpccli, c.opts...),
			EncodeHandleRequestsRequest,
			nil)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// Carbonreport calls the "Carbonreport" function in calcpb.CalcClient
// interface.
func (c *Client) Carbonreport() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildCarbonreportFunc(c.grpccli, c.opts...),
			nil,
			nil)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}
