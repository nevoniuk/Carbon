// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc gRPC client types
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design

package client

import (
	calc "github.com/crossnokaye/carbon/services/calc/gen/calc"
	calcpb "github.com/crossnokaye/carbon/services/calc/gen/grpc/calc/pb"
	goa "goa.design/goa/v3/pkg"
)

// NewProtoHandleRequestsRequest builds the gRPC request type from the payload
// of the "handle_requests" endpoint of the "calc" service.
func NewProtoHandleRequestsRequest(payload *calc.RequestPayload) *calcpb.HandleRequestsRequest {
	message := &calcpb.HandleRequestsRequest{
		Org:      string(payload.Org),
		Agent:    payload.Agent,
		Interval: payload.Interval,
	}
	if payload.Duration != nil {
		message.Duration = svcCalcPeriodToCalcpbPeriod(payload.Duration)
	}
	return message
}

// NewHandleRequestsResult builds the result type of the "handle_requests"
// endpoint of the "calc" service from the gRPC response type.
func NewHandleRequestsResult(message *calcpb.HandleRequestsResponse) *calc.AllReports {
	result := &calc.AllReports{}
	if message.CarbonIntensityReports != nil {
		result.CarbonIntensityReports = make([]*calc.CarbonReport, len(message.CarbonIntensityReports))
		for i, val := range message.CarbonIntensityReports {
			result.CarbonIntensityReports[i] = &calc.CarbonReport{
				GeneratedRate: val.GeneratedRate,
				DurationType:  val.DurationType,
				Region:        val.Region,
			}
			if val.Duration != nil {
				result.CarbonIntensityReports[i].Duration = protobufCalcpbPeriodToCalcPeriod(val.Duration)
			}
		}
	}
	if message.PowerReports != nil {
		result.PowerReports = make([]*calc.ElectricalReport, len(message.PowerReports))
		for i, val := range message.PowerReports {
			result.PowerReports[i] = &calc.ElectricalReport{
				Org:          calc.UUID(val.Org),
				Agent:        val.Agent,
				IntervalType: val.IntervalType,
			}
			if val.Duration != nil {
				result.PowerReports[i].Duration = protobufCalcpbPeriodToCalcPeriod(val.Duration)
			}
			if val.Stamp != nil {
				result.PowerReports[i].Stamp = protobufCalcpbPowerStampToCalcPowerStamp(val.Stamp)
			}
		}
	}
	if message.TotalEmissionReports != nil {
		result.TotalEmissionReports = make([]*calc.EmissionsReport, len(message.TotalEmissionReports))
		for i, val := range message.TotalEmissionReports {
			result.TotalEmissionReports[i] = &calc.EmissionsReport{
				DurationType: val.DurationType,
				Org:          calc.UUID(val.Org),
				Agent:        val.Agent,
			}
			if val.Duration != nil {
				result.TotalEmissionReports[i].Duration = protobufCalcpbPeriodToCalcPeriod(val.Duration)
			}
			if val.Points != nil {
				result.TotalEmissionReports[i].Points = make([]*calc.DataPoint, len(val.Points))
				for j, val := range val.Points {
					result.TotalEmissionReports[i].Points[j] = &calc.DataPoint{
						Time:            val.Time,
						CarbonFootprint: val.CarbonFootprint,
					}
				}
			}
		}
	}
	return result
}

// NewProtoGetCarbonReportRequest builds the gRPC request type from the payload
// of the "get_carbon_report" endpoint of the "calc" service.
func NewProtoGetCarbonReportRequest() *calcpb.GetCarbonReportRequest {
	message := &calcpb.GetCarbonReportRequest{}
	return message
}

// ValidateUUID runs the validations defined on UUID.
func ValidateUUID(message string) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message", message, goa.FormatUUID))

	return
}

// ValidatePeriod runs the validations defined on Period.
func ValidatePeriod(message *calcpb.Period) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.StartTime", message.StartTime, goa.FormatDateTime))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.EndTime", message.EndTime, goa.FormatDateTime))

	return
}

// ValidateHandleRequestsResponse runs the validations defined on
// HandleRequestsResponse.
func ValidateHandleRequestsResponse(message *calcpb.HandleRequestsResponse) (err error) {
	if message.CarbonIntensityReports == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("CarbonIntensityReports", "message"))
	}
	if message.PowerReports == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("PowerReports", "message"))
	}
	if message.TotalEmissionReports == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("TotalEmissionReports", "message"))
	}
	for _, e := range message.CarbonIntensityReports {
		if e != nil {
			if err2 := ValidateCarbonReport(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range message.PowerReports {
		if e != nil {
			if err2 := ValidateElectricalReport(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range message.TotalEmissionReports {
		if e != nil {
			if err2 := ValidateEmissionsReport(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCarbonReport runs the validations defined on CarbonReport.
func ValidateCarbonReport(message *calcpb.CarbonReport) (err error) {
	if message.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Duration", "message"))
	}
	if message.Duration != nil {
		if err2 := ValidatePeriod(message.Duration); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateElectricalReport runs the validations defined on ElectricalReport.
func ValidateElectricalReport(message *calcpb.ElectricalReport) (err error) {
	if message.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Duration", "message"))
	}
	if message.Stamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Stamp", "message"))
	}
	if message.Duration != nil {
		if err2 := ValidatePeriod(message.Duration); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message", string(message.Org), goa.FormatUUID))

	if message.Stamp != nil {
		if err2 := ValidatePowerStamp(message.Stamp); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePowerStamp runs the validations defined on PowerStamp.
func ValidatePowerStamp(message *calcpb.PowerStamp) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.Time", message.Time, goa.FormatDateTime))

	return
}

// ValidateEmissionsReport runs the validations defined on EmissionsReport.
func ValidateEmissionsReport(message *calcpb.EmissionsReport) (err error) {
	if message.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Duration", "message"))
	}
	if message.Points == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Points", "message"))
	}
	if message.Duration != nil {
		if err2 := ValidatePeriod(message.Duration); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range message.Points {
		if e != nil {
			if err2 := ValidateDataPoint(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message", string(message.Org), goa.FormatUUID))

	return
}

// ValidateDataPoint runs the validations defined on DataPoint.
func ValidateDataPoint(message *calcpb.DataPoint) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.Time", message.Time, goa.FormatDateTime))

	return
}

// protobufCalcpbPeriodToCalcPeriod builds a value of type *calc.Period from a
// value of type *calcpb.Period.
func protobufCalcpbPeriodToCalcPeriod(v *calcpb.Period) *calc.Period {
	res := &calc.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}

// svcCalcPeriodToCalcpbPeriod builds a value of type *calcpb.Period from a
// value of type *calc.Period.
func svcCalcPeriodToCalcpbPeriod(v *calc.Period) *calcpb.Period {
	res := &calcpb.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}

// svcCalcPowerStampToCalcpbPowerStamp builds a value of type
// *calcpb.PowerStamp from a value of type *calc.PowerStamp.
func svcCalcPowerStampToCalcpbPowerStamp(v *calc.PowerStamp) *calcpb.PowerStamp {
	res := &calcpb.PowerStamp{
		Time:          v.Time,
		GeneratedRate: v.GeneratedRate,
	}

	return res
}

// protobufCalcpbPowerStampToCalcPowerStamp builds a value of type
// *calc.PowerStamp from a value of type *calcpb.PowerStamp.
func protobufCalcpbPowerStampToCalcPowerStamp(v *calcpb.PowerStamp) *calc.PowerStamp {
	res := &calc.PowerStamp{
		Time:          v.Time,
		GeneratedRate: v.GeneratedRate,
	}

	return res
}
