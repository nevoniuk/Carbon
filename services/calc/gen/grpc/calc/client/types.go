// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc gRPC client types
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design -o services/calc

package client

import (
	"unicode/utf8"

	calc "github.com/crossnokaye/carbon/services/calc/gen/calc"
	calcpb "github.com/crossnokaye/carbon/services/calc/gen/grpc/calc/pb"
	goa "goa.design/goa/v3/pkg"
)

// NewProtoHistoricalCarbonEmissionsRequest builds the gRPC request type from
// the payload of the "historical_carbon_emissions" endpoint of the "calc"
// service.
func NewProtoHistoricalCarbonEmissionsRequest(payload *calc.RequestPayload) *calcpb.HistoricalCarbonEmissionsRequest {
	message := &calcpb.HistoricalCarbonEmissionsRequest{
		OrgId:      string(payload.OrgID),
		FacilityId: string(payload.FacilityID),
		Interval:   payload.Interval,
		LocationId: string(payload.LocationID),
	}
	if payload.Duration != nil {
		message.Duration = svcCalcPeriodToCalcpbPeriod(payload.Duration)
	}
	return message
}

// NewHistoricalCarbonEmissionsResult builds the result type of the
// "historical_carbon_emissions" endpoint of the "calc" service from the gRPC
// response type.
func NewHistoricalCarbonEmissionsResult(message *calcpb.HistoricalCarbonEmissionsResponse) *calc.AllReports {
	result := &calc.AllReports{}
	if message.CarbonIntensityReports != nil {
		result.CarbonIntensityReports = make([]*calc.CarbonReport, len(message.CarbonIntensityReports))
		for i, val := range message.CarbonIntensityReports {
			result.CarbonIntensityReports[i] = &calc.CarbonReport{
				GeneratedRate: val.GeneratedRate,
				Interval:      val.Interval,
				Region:        val.Region,
			}
			if val.Duration != nil {
				result.CarbonIntensityReports[i].Duration = protobufCalcpbPeriodToCalcPeriod(val.Duration)
			}
		}
	}
	if message.PowerReports != nil {
		result.PowerReports = make([]*calc.ElectricalReport, len(message.PowerReports))
		for i, val := range message.PowerReports {
			result.PowerReports[i] = &calc.ElectricalReport{
				Power:    val.Power,
				Interval: val.Interval,
			}
			if val.Duration != nil {
				result.PowerReports[i].Duration = protobufCalcpbPeriodToCalcPeriod(val.Duration)
			}
			if val.Payload != nil {
				result.PowerReports[i].Payload = protobufCalcpbPastValPayloadToCalcPastValPayload(val.Payload)
			}
		}
	}
	if message.TotalEmissionReport != nil {
		result.TotalEmissionReport = protobufCalcpbEmissionsReportToCalcEmissionsReport(message.TotalEmissionReport)
	}
	return result
}

// ValidateUUID runs the validations defined on UUID.
func ValidateUUID(message string) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message", message, goa.FormatUUID))

	return
}

// ValidatePeriod runs the validations defined on Period.
func ValidatePeriod(message *calcpb.Period) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.start_time", message.StartTime, goa.FormatDateTime))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.end_time", message.EndTime, goa.FormatDateTime))

	return
}

// ValidateHistoricalCarbonEmissionsResponse runs the validations defined on
// HistoricalCarbonEmissionsResponse.
func ValidateHistoricalCarbonEmissionsResponse(message *calcpb.HistoricalCarbonEmissionsResponse) (err error) {
	if message.CarbonIntensityReports == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("carbon_intensity_reports", "message"))
	}
	if message.PowerReports == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("power_reports", "message"))
	}
	if message.TotalEmissionReport == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_emission_report", "message"))
	}
	if len(message.CarbonIntensityReports) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.carbon_intensity_reports", message.CarbonIntensityReports, len(message.CarbonIntensityReports), 1, true))
	}
	for _, e := range message.CarbonIntensityReports {
		if e != nil {
			if err2 := ValidateCarbonReport(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if len(message.PowerReports) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.power_reports", message.PowerReports, len(message.PowerReports), 1, true))
	}
	for _, e := range message.PowerReports {
		if e != nil {
			if err2 := ValidateElectricalReport(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if message.TotalEmissionReport != nil {
		if err2 := ValidateEmissionsReport(message.TotalEmissionReport); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCarbonReport runs the validations defined on CarbonReport.
func ValidateCarbonReport(message *calcpb.CarbonReport) (err error) {
	if message.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "message"))
	}
	if message.Duration != nil {
		if err2 := ValidatePeriod(message.Duration); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if !(message.Interval == "minute" || message.Interval == "hourly" || message.Interval == "daily" || message.Interval == "weekly" || message.Interval == "monthly") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.interval", message.Interval, []interface{}{"minute", "hourly", "daily", "weekly", "monthly"}))
	}
	if !(message.Region == "CAISO" || message.Region == "AESO" || message.Region == "BPA" || message.Region == "ERCO" || message.Region == "IESO" || message.Region == "ISONE" || message.Region == "MISO" || message.Region == "NYISO" || message.Region == "NYISO.NYCW" || message.Region == "NYISO.NYLI" || message.Region == "NYISO.NYUP" || message.Region == "PJM" || message.Region == "SPP") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.region", message.Region, []interface{}{"CAISO", "AESO", "BPA", "ERCO", "IESO", "ISONE", "MISO", "NYISO", "NYISO.NYCW", "NYISO.NYLI", "NYISO.NYUP", "PJM", "SPP"}))
	}
	return
}

// ValidateElectricalReport runs the validations defined on ElectricalReport.
func ValidateElectricalReport(message *calcpb.ElectricalReport) (err error) {
	if message.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "message"))
	}
	if message.Payload == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payload", "message"))
	}
	if message.Duration != nil {
		if err2 := ValidatePeriod(message.Duration); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if !(message.Interval == "minute" || message.Interval == "hourly" || message.Interval == "daily" || message.Interval == "weekly" || message.Interval == "monthly") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.interval", message.Interval, []interface{}{"minute", "hourly", "daily", "weekly", "monthly"}))
	}
	if message.Payload != nil {
		if err2 := ValidatePastValPayload(message.Payload); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePastValPayload runs the validations defined on PastValPayload.
func ValidatePastValPayload(message *calcpb.PastValPayload) (err error) {
	if message.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "message"))
	}
	if message.Duration != nil {
		if err2 := ValidatePeriod(message.Duration); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if !(message.Interval == "minute" || message.Interval == "hourly" || message.Interval == "daily" || message.Interval == "weekly" || message.Interval == "monthly") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.interval", message.Interval, []interface{}{"minute", "hourly", "daily", "weekly", "monthly"}))
	}
	if utf8.RuneCountInString(message.ControlPoint) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.control_point", message.ControlPoint, utf8.RuneCountInString(message.ControlPoint), 1, true))
	}
	if message.Formula != "" {
		if utf8.RuneCountInString(message.Formula) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.formula", message.Formula, utf8.RuneCountInString(message.Formula), 1, true))
		}
	}
	if utf8.RuneCountInString(message.AgentName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.agent_name", message.AgentName, utf8.RuneCountInString(message.AgentName), 1, true))
	}
	return
}

// ValidateEmissionsReport runs the validations defined on EmissionsReport.
func ValidateEmissionsReport(message *calcpb.EmissionsReport) (err error) {
	if message.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "message"))
	}
	if message.Points == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("points", "message"))
	}
	if message.Duration != nil {
		if err2 := ValidatePeriod(message.Duration); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if !(message.Interval == "minute" || message.Interval == "hourly" || message.Interval == "daily" || message.Interval == "weekly" || message.Interval == "monthly") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.interval", message.Interval, []interface{}{"minute", "hourly", "daily", "weekly", "monthly"}))
	}
	for _, e := range message.Points {
		if e != nil {
			if err2 := ValidateDataPoint(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message", string(message.OrgId), goa.FormatUUID))

	err = goa.MergeErrors(err, goa.ValidateFormat("message", string(message.FacilityId), goa.FormatUUID))

	err = goa.MergeErrors(err, goa.ValidateFormat("message", string(message.LocationId), goa.FormatUUID))

	if !(message.Region == "CAISO" || message.Region == "AESO" || message.Region == "BPA" || message.Region == "ERCO" || message.Region == "IESO" || message.Region == "ISONE" || message.Region == "MISO" || message.Region == "NYISO" || message.Region == "NYISO.NYCW" || message.Region == "NYISO.NYLI" || message.Region == "NYISO.NYUP" || message.Region == "PJM" || message.Region == "SPP") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.region", message.Region, []interface{}{"CAISO", "AESO", "BPA", "ERCO", "IESO", "ISONE", "MISO", "NYISO", "NYISO.NYCW", "NYISO.NYLI", "NYISO.NYUP", "PJM", "SPP"}))
	}
	return
}

// ValidateDataPoint runs the validations defined on DataPoint.
func ValidateDataPoint(message *calcpb.DataPoint) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.time", message.Time, goa.FormatDateTime))

	return
}

// protobufCalcpbPeriodToCalcPeriod builds a value of type *calc.Period from a
// value of type *calcpb.Period.
func protobufCalcpbPeriodToCalcPeriod(v *calcpb.Period) *calc.Period {
	res := &calc.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}

// svcCalcPeriodToCalcpbPeriod builds a value of type *calcpb.Period from a
// value of type *calc.Period.
func svcCalcPeriodToCalcpbPeriod(v *calc.Period) *calcpb.Period {
	res := &calcpb.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}

// svcCalcPastValPayloadToCalcpbPastValPayload builds a value of type
// *calcpb.PastValPayload from a value of type *calc.PastValPayload.
func svcCalcPastValPayloadToCalcpbPastValPayload(v *calc.PastValPayload) *calcpb.PastValPayload {
	res := &calcpb.PastValPayload{
		OrgId:           v.OrgID,
		PastValInterval: v.PastValInterval,
		Interval:        v.Interval,
		ControlPoint:    v.ControlPoint,
		AgentName:       v.AgentName,
	}
	if v.Formula != nil {
		res.Formula = *v.Formula
	}
	if v.Duration != nil {
		res.Duration = svcCalcPeriodToCalcpbPeriod(v.Duration)
	}

	return res
}

// svcCalcEmissionsReportToCalcpbEmissionsReport builds a value of type
// *calcpb.EmissionsReport from a value of type *calc.EmissionsReport.
func svcCalcEmissionsReportToCalcpbEmissionsReport(v *calc.EmissionsReport) *calcpb.EmissionsReport {
	res := &calcpb.EmissionsReport{
		Interval:   v.Interval,
		OrgId:      string(v.OrgID),
		FacilityId: string(v.FacilityID),
		LocationId: string(v.LocationID),
		Region:     v.Region,
	}
	if v.Duration != nil {
		res.Duration = svcCalcPeriodToCalcpbPeriod(v.Duration)
	}
	if v.Points != nil {
		res.Points = make([]*calcpb.DataPoint, len(v.Points))
		for i, val := range v.Points {
			res.Points[i] = &calcpb.DataPoint{
				Time:            val.Time,
				CarbonFootprint: val.CarbonFootprint,
			}
		}
	}

	return res
}

// protobufCalcpbPastValPayloadToCalcPastValPayload builds a value of type
// *calc.PastValPayload from a value of type *calcpb.PastValPayload.
func protobufCalcpbPastValPayloadToCalcPastValPayload(v *calcpb.PastValPayload) *calc.PastValPayload {
	res := &calc.PastValPayload{
		OrgID:           v.OrgId,
		PastValInterval: v.PastValInterval,
		Interval:        v.Interval,
		ControlPoint:    v.ControlPoint,
		AgentName:       v.AgentName,
	}
	if v.Formula != "" {
		res.Formula = &v.Formula
	}
	if v.Duration != nil {
		res.Duration = protobufCalcpbPeriodToCalcPeriod(v.Duration)
	}

	return res
}

// protobufCalcpbEmissionsReportToCalcEmissionsReport builds a value of type
// *calc.EmissionsReport from a value of type *calcpb.EmissionsReport.
func protobufCalcpbEmissionsReportToCalcEmissionsReport(v *calcpb.EmissionsReport) *calc.EmissionsReport {
	res := &calc.EmissionsReport{
		Interval:   v.Interval,
		OrgID:      calc.UUID(v.OrgId),
		FacilityID: calc.UUID(v.FacilityId),
		LocationID: calc.UUID(v.LocationId),
		Region:     v.Region,
	}
	if v.Duration != nil {
		res.Duration = protobufCalcpbPeriodToCalcPeriod(v.Duration)
	}
	if v.Points != nil {
		res.Points = make([]*calc.DataPoint, len(v.Points))
		for i, val := range v.Points {
			res.Points[i] = &calc.DataPoint{
				Time:            val.Time,
				CarbonFootprint: val.CarbonFootprint,
			}
		}
	}

	return res
}
