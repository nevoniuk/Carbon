// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design

package client

import (
	"context"

	calcpb "github.com/crossnokaye/carbon/services/calc/gen/grpc/calc/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
)

// BuildCalculateReportsFunc builds the remote method to invoke for "calc"
// service "calculate_reports" endpoint.
func BuildCalculateReportsFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CalculateReports(ctx, reqpb.(*calcpb.CalculateReportsRequest), opts...)
		}
		return grpccli.CalculateReports(ctx, &calcpb.CalculateReportsRequest{}, opts...)
	}
}

// BuildGetControlPointsFunc builds the remote method to invoke for "calc"
// service "get_control_points" endpoint.
func BuildGetControlPointsFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetControlPoints(ctx, reqpb.(*calcpb.GetControlPointsRequest), opts...)
		}
		return grpccli.GetControlPoints(ctx, &calcpb.GetControlPointsRequest{}, opts...)
	}
}

// BuildGetPowerFunc builds the remote method to invoke for "calc" service
// "get_power" endpoint.
func BuildGetPowerFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetPower(ctx, reqpb.(*calcpb.GetPowerRequest), opts...)
		}
		return grpccli.GetPower(ctx, &calcpb.GetPowerRequest{}, opts...)
	}
}

// BuildGetEmissionsFunc builds the remote method to invoke for "calc" service
// "get_emissions" endpoint.
func BuildGetEmissionsFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetEmissions(ctx, reqpb.(*calcpb.GetEmissionsRequest), opts...)
		}
		return grpccli.GetEmissions(ctx, &calcpb.GetEmissionsRequest{}, opts...)
	}
}

// BuildHandleRequestsFunc builds the remote method to invoke for "calc"
// service "handle_requests" endpoint.
func BuildHandleRequestsFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.HandleRequests(ctx, reqpb.(*calcpb.HandleRequestsRequest), opts...)
		}
		return grpccli.HandleRequests(ctx, &calcpb.HandleRequestsRequest{}, opts...)
	}
}

// BuildCarbonreportFunc builds the remote method to invoke for "calc" service
// "carbonreport" endpoint.
func BuildCarbonreportFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Carbonreport(ctx, reqpb.(*calcpb.CarbonreportRequest), opts...)
		}
		return grpccli.Carbonreport(ctx, &calcpb.CarbonreportRequest{}, opts...)
	}
}
