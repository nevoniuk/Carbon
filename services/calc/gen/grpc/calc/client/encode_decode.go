// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design

package client

import (
	"context"

	calc "github.com/crossnokaye/carbon/services/calc/gen/calc"
	calcpb "github.com/crossnokaye/carbon/services/calc/gen/grpc/calc/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildHistoricalCarbonEmissionsFunc builds the remote method to invoke for
// "calc" service "historical_carbon_emissions" endpoint.
func BuildHistoricalCarbonEmissionsFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.HistoricalCarbonEmissions(ctx, reqpb.(*calcpb.HistoricalCarbonEmissionsRequest), opts...)
		}
		return grpccli.HistoricalCarbonEmissions(ctx, &calcpb.HistoricalCarbonEmissionsRequest{}, opts...)
	}
}

// EncodeHistoricalCarbonEmissionsRequest encodes requests sent to calc
// historical_carbon_emissions endpoint.
func EncodeHistoricalCarbonEmissionsRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*calc.RequestPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "historical_carbon_emissions", "*calc.RequestPayload", v)
	}
	return NewProtoHistoricalCarbonEmissionsRequest(payload), nil
}

// DecodeHistoricalCarbonEmissionsResponse decodes responses from the calc
// historical_carbon_emissions endpoint.
func DecodeHistoricalCarbonEmissionsResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*calcpb.HistoricalCarbonEmissionsResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "historical_carbon_emissions", "*calcpb.HistoricalCarbonEmissionsResponse", v)
	}
	if err := ValidateHistoricalCarbonEmissionsResponse(message); err != nil {
		return nil, err
	}
	res := NewHistoricalCarbonEmissionsResult(message)
	return res, nil
}
