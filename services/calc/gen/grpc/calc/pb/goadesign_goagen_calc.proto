// Code generated with goa v3.7.6, DO NOT EDIT.
//
// calc protocol buffer definition
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design -o services/calc

syntax = "proto3";

package calc;

option go_package = "/calcpb";

// Service to interpret CO2 emissions through power and carbon intensity data
service Calc {
	// This endpoint is used by a front end service to return carbon emission
// reports
	rpc HandleRequests (HandleRequestsRequest) returns (HandleRequestsResponse);
	// Make reports available to external/R&D clients
	rpc GetCarbonReport (GetCarbonReportRequest) returns (GetCarbonReportResponse);
}

message HandleRequestsRequest {
	// OrgID
	string org_id = 1;
	// Duration
	Period duration = 2;
	// AgentID
	string agent_id = 3;
	// FacilityID
	string facility_id = 4;
	// Interval
	string interval = 5;
}
// Period of time from start to end for any report type
message Period {
	// Start time
	string start_time = 1;
	// End time
	string end_time = 2;
}

message HandleRequestsResponse {
	// CarbonIntensityReports
	repeated CarbonReport carbon_intensity_reports = 1;
	// PowerReports
	repeated ElectricalReport power_reports = 2;
	// TotalEmissionReport
	EmissionsReport total_emission_report = 3;
}
// Carbon Report from clickhouse
message CarbonReport {
	// This is in units of (lbs of CO2/MWh)
	double generated_rate = 1;
	// Duration
	Period duration = 2;
	// DurationType
	string duration_type = 3;
	// As found in the Enums section of the Poller service in the URL above
	string region = 4;
}
// Energy Generation Report from the Past values function GetValues
message ElectricalReport {
	// Duration
	Period duration = 1;
	// OrgID
	string org_id = 2;
	// AgentID
	string agent_id = 3;
	// Power meter data in KWh
	double generated_rate = 4;
	// IntervalType
	string interval_type = 5;
	// FacilityID
	string facility_id = 6;
}
// Carbon/Energy Generation Report
message EmissionsReport {
	// Duration
	Period duration = 1;
	// DurationType
	string duration_type = 2;
	// Points
	repeated DataPoint points = 3;
	// OrgID
	string org_id = 4;
	// AgentID
	string agent_id = 5;
	// FacilityID
	string facility_id = 6;
}
// Contains carbon emissions in terms of DataPoints, which can be used as
// points for a time/CO2 emissions graph
message DataPoint {
	// Time
	string time = 1;
	// carbon footprint is the lbs of CO2 emissions
	double carbon_footprint = 2;
}

message GetCarbonReportRequest {
}

message GetCarbonReportResponse {
}
