// Code generated with goa v3.7.6, DO NOT EDIT.
//
// Calc protocol buffer definition
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design -o services/calc

syntax = "proto3";

package calc;

option go_package = "/calcpb";

// Service to interpret CO2 emissions through KW and carbon intensity data.
// Offers the endpoint Historical Carbon Emissions
service Calc {
	// This endpoint is used by a front end service to return carbon emission
// reports
	rpc HistoricalCarbonEmissions (HistoricalCarbonEmissionsRequest) returns (HistoricalCarbonEmissionsResponse);
}

message HistoricalCarbonEmissionsRequest {
	// OrgID
	string org_id = 1;
	// Duration
	Period duration = 2;
	// FacilityID
	string facility_id = 3;
	string interval = 4;
	// LocationID
	string location_id = 5;
}
// Period of time from start to end for any report type
message Period {
	// Start time
	string start_time = 1;
	// End time
	string end_time = 2;
}

message HistoricalCarbonEmissionsResponse {
	// TotalEmissionReport
	EmissionsReport total_emission_report = 1;
	// CarbonIntensityReports
	CarbonReport carbon_intensity_reports = 2;
	// PowerReports
	ElectricalReport power_reports = 3;
}
// Carbon/Energy Generation Report
message EmissionsReport {
	// Duration
	Period duration = 1;
	string interval = 2;
	// Points
	repeated DataPoint points = 3;
	// OrgID
	string org_id = 4;
	// FacilityID
	string facility_id = 5;
	// LocationID
	string location_id = 6;
	string region = 7;
}
// Contains carbon emissions in terms of DataPoints, which can be used as
// points for a time/CO2 emissions graph
message DataPoint {
	// Time
	string time = 1;
	// either a carbon footprint(lbs of Co2) in a CarbonEmissions struct or power
// stamp(KW) in an Electrical Report
	double value = 2;
}
// Carbon Report from clickhouse
message CarbonReport {
	// Values are in units of (lbs of CO2/MWh)
	repeated DataPoint intensity_points = 1;
	// Duration
	Period duration = 2;
	string interval = 3;
	string region = 4;
}
// Energy Generation Report from the Past values function GetValues
message ElectricalReport {
	// Duration
	Period duration = 1;
	// Power meter data in KWh
	repeated DataPoint power_stamps = 2;
	string interval = 3;
}
