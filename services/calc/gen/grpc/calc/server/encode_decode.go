// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design

package server

import (
	"context"

	calc "github.com/crossnokaye/carbon/services/calc/gen/calc"
	calcpb "github.com/crossnokaye/carbon/services/calc/gen/grpc/calc/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeHandleRequestsResponse encodes responses from the "calc" service
// "handle_requests" endpoint.
func EncodeHandleRequestsResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*calc.AllReports)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "handle_requests", "*calc.AllReports", v)
	}
	resp := NewProtoHandleRequestsResponse(result)
	return resp, nil
}

// DecodeHandleRequestsRequest decodes requests sent to "calc" service
// "handle_requests" endpoint.
func DecodeHandleRequestsRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *calcpb.HandleRequestsRequest
		ok      bool
	)
	{
		if message, ok = v.(*calcpb.HandleRequestsRequest); !ok {
			return nil, goagrpc.ErrInvalidType("calc", "handle_requests", "*calcpb.HandleRequestsRequest", v)
		}
		if err := ValidateHandleRequestsRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *calc.RequestPayload
	{
		payload = NewHandleRequestsPayload(message)
	}
	return payload, nil
}

// EncodeGetCarbonReportResponse encodes responses from the "calc" service
// "get_carbon_report" endpoint.
func EncodeGetCarbonReportResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoGetCarbonReportResponse()
	return resp, nil
}
