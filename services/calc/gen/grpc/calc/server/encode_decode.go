// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design

package server

import (
	"context"

	"google.golang.org/grpc/metadata"
)

// EncodeCalculateReportsResponse encodes responses from the "calc" service
// "calculate_reports" endpoint.
func EncodeCalculateReportsResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoCalculateReportsResponse()
	return resp, nil
}

// EncodeGetControlPointsResponse encodes responses from the "calc" service
// "get_control_points" endpoint.
func EncodeGetControlPointsResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoGetControlPointsResponse()
	return resp, nil
}

// EncodeGetPowerResponse encodes responses from the "calc" service "get_power"
// endpoint.
func EncodeGetPowerResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoGetPowerResponse()
	return resp, nil
}

// EncodeGetEmissionsResponse encodes responses from the "calc" service
// "get_emissions" endpoint.
func EncodeGetEmissionsResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoGetEmissionsResponse()
	return resp, nil
}

// EncodeHandleRequestsResponse encodes responses from the "calc" service
// "handle_requests" endpoint.
func EncodeHandleRequestsResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoHandleRequestsResponse()
	return resp, nil
}

// EncodeCarbonreportResponse encodes responses from the "calc" service
// "carbonreport" endpoint.
func EncodeCarbonreportResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewProtoCarbonreportResponse()
	return resp, nil
}
