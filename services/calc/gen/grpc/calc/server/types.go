// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc gRPC server types
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design

package server

import (
	calc "github.com/crossnokaye/carbon/services/calc/gen/calc"
	calcpb "github.com/crossnokaye/carbon/services/calc/gen/grpc/calc/pb"
	goa "goa.design/goa/v3/pkg"
)

// NewHandleRequestsPayload builds the payload of the "handle_requests"
// endpoint of the "calc" service from the gRPC request type.
func NewHandleRequestsPayload(message *calcpb.HandleRequestsRequest) *calc.RequestPayload {
	v := &calc.RequestPayload{
		Org:      calc.UUID(message.Org),
		Building: calc.UUID(message.Building),
		Interval: message.Interval,
	}
	if message.Period != nil {
		v.Period = protobufCalcpbPeriodToCalcPeriod(message.Period)
	}
	return v
}

// NewProtoHandleRequestsResponse builds the gRPC response type from the result
// of the "handle_requests" endpoint of the "calc" service.
func NewProtoHandleRequestsResponse(result *calc.AllReports) *calcpb.HandleRequestsResponse {
	message := &calcpb.HandleRequestsResponse{}
	if result.CarbonIntensityReports != nil {
		message.CarbonIntensityReports = make([]*calcpb.CarbonReport, len(result.CarbonIntensityReports))
		for i, val := range result.CarbonIntensityReports {
			message.CarbonIntensityReports[i] = &calcpb.CarbonReport{
				GeneratedRate: val.GeneratedRate,
				DurationType:  val.DurationType,
				Region:        val.Region,
			}
			if val.Duration != nil {
				message.CarbonIntensityReports[i].Duration = svcCalcPeriodToCalcpbPeriod(val.Duration)
			}
		}
	}
	if result.PowerReports != nil {
		message.PowerReports = make([]*calcpb.ElectricalReport, len(result.PowerReports))
		for i, val := range result.PowerReports {
			message.PowerReports[i] = &calcpb.ElectricalReport{
				Postalcode:   val.Postalcode,
				Facility:     string(val.Facility),
				Building:     string(val.Building),
				IntervalType: val.IntervalType,
			}
			if val.Period != nil {
				message.PowerReports[i].Period = svcCalcPeriodToCalcpbPeriod(val.Period)
			}
			if val.Stamp != nil {
				message.PowerReports[i].Stamp = make([]*calcpb.PowerStamp, len(val.Stamp))
				for j, val := range val.Stamp {
					message.PowerReports[i].Stamp[j] = &calcpb.PowerStamp{}
					if val.Time != nil {
						message.PowerReports[i].Stamp[j].Time = *val.Time
					}
					if val.GenRate != nil {
						message.PowerReports[i].Stamp[j].GenRate = *val.GenRate
					}
				}
			}
		}
	}
	if result.TotalEmissionReports != nil {
		message.TotalEmissionReports = make([]*calcpb.EmissionsReport, len(result.TotalEmissionReports))
		for i, val := range result.TotalEmissionReports {
			message.TotalEmissionReports[i] = &calcpb.EmissionsReport{
				DurationType: val.DurationType,
				Facility:     string(val.Facility),
			}
			if val.Duration != nil {
				message.TotalEmissionReports[i].Duration = svcCalcPeriodToCalcpbPeriod(val.Duration)
			}
			if val.Point != nil {
				message.TotalEmissionReports[i].Point = make([]*calcpb.DataPoint, len(val.Point))
				for j, val := range val.Point {
					message.TotalEmissionReports[i].Point[j] = &calcpb.DataPoint{
						Time:       val.Time,
						CarbonRate: val.CarbonRate,
					}
				}
			}
		}
	}
	return message
}

// NewProtoCarbonReportResponse builds the gRPC response type from the result
// of the "carbon_report" endpoint of the "calc" service.
func NewProtoCarbonReportResponse() *calcpb.CarbonReportResponse {
	message := &calcpb.CarbonReportResponse{}
	return message
}

// ValidateHandleRequestsRequest runs the validations defined on
// HandleRequestsRequest.
func ValidateHandleRequestsRequest(message *calcpb.HandleRequestsRequest) (err error) {
	if message.Period == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Period", "message"))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message", string(message.Org), goa.FormatUUID))

	if message.Period != nil {
		if err2 := ValidatePeriod(message.Period); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message", string(message.Building), goa.FormatUUID))

	return
}

// ValidateUUID runs the validations defined on UUID.
func ValidateUUID(message string) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message", message, goa.FormatUUID))

	return
}

// ValidatePeriod runs the validations defined on Period.
func ValidatePeriod(message *calcpb.Period) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.startTime", message.StartTime, goa.FormatDateTime))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.endTime", message.EndTime, goa.FormatDateTime))

	return
}

// protobufCalcpbPeriodToCalcPeriod builds a value of type *calc.Period from a
// value of type *calcpb.Period.
func protobufCalcpbPeriodToCalcPeriod(v *calcpb.Period) *calc.Period {
	res := &calc.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}

// svcCalcPeriodToCalcpbPeriod builds a value of type *calcpb.Period from a
// value of type *calc.Period.
func svcCalcPeriodToCalcpbPeriod(v *calc.Period) *calcpb.Period {
	res := &calcpb.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}
