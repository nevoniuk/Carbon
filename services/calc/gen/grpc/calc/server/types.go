// Code generated by goa v3.7.6, DO NOT EDIT.
//
// calc gRPC server types
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design

package server

import (
	calc "github.com/crossnokaye/carbon/services/calc/gen/calc"
	calcpb "github.com/crossnokaye/carbon/services/calc/gen/grpc/calc/pb"
	goa "goa.design/goa/v3/pkg"
)

// NewHandleRequestsPayload builds the payload of the "handle_requests"
// endpoint of the "calc" service from the gRPC request type.
func NewHandleRequestsPayload(message *calcpb.HandleRequestsRequest) *calc.RequestPayload {
	v := &calc.RequestPayload{
		Org:      calc.UUID(message.Org),
		Agent:    message.Agent,
		Interval: message.Interval,
	}
	if message.Duration != nil {
		v.Duration = protobufCalcpbPeriodToCalcPeriod(message.Duration)
	}
	return v
}

// NewProtoHandleRequestsResponse builds the gRPC response type from the result
// of the "handle_requests" endpoint of the "calc" service.
func NewProtoHandleRequestsResponse(result *calc.AllReports) *calcpb.HandleRequestsResponse {
	message := &calcpb.HandleRequestsResponse{}
	if result.CarbonIntensityReports != nil {
		message.CarbonIntensityReports = make([]*calcpb.CarbonReport, len(result.CarbonIntensityReports))
		for i, val := range result.CarbonIntensityReports {
			message.CarbonIntensityReports[i] = &calcpb.CarbonReport{
				GeneratedRate: val.GeneratedRate,
				DurationType:  val.DurationType,
				Region:        val.Region,
			}
			if val.Duration != nil {
				message.CarbonIntensityReports[i].Duration = svcCalcPeriodToCalcpbPeriod(val.Duration)
			}
		}
	}
	if result.PowerReports != nil {
		message.PowerReports = make([]*calcpb.ElectricalReport, len(result.PowerReports))
		for i, val := range result.PowerReports {
			message.PowerReports[i] = &calcpb.ElectricalReport{
				Org:          string(val.Org),
				Agent:        val.Agent,
				IntervalType: val.IntervalType,
			}
			if val.Duration != nil {
				message.PowerReports[i].Duration = svcCalcPeriodToCalcpbPeriod(val.Duration)
			}
			if val.Stamp != nil {
				message.PowerReports[i].Stamp = svcCalcPowerStampToCalcpbPowerStamp(val.Stamp)
			}
		}
	}
	if result.TotalEmissionReports != nil {
		message.TotalEmissionReports = make([]*calcpb.EmissionsReport, len(result.TotalEmissionReports))
		for i, val := range result.TotalEmissionReports {
			message.TotalEmissionReports[i] = &calcpb.EmissionsReport{
				DurationType: val.DurationType,
				Org:          string(val.Org),
				Agent:        val.Agent,
			}
			if val.Duration != nil {
				message.TotalEmissionReports[i].Duration = svcCalcPeriodToCalcpbPeriod(val.Duration)
			}
			if val.Points != nil {
				message.TotalEmissionReports[i].Points = make([]*calcpb.DataPoint, len(val.Points))
				for j, val := range val.Points {
					message.TotalEmissionReports[i].Points[j] = &calcpb.DataPoint{
						Time:            val.Time,
						CarbonFootprint: val.CarbonFootprint,
					}
				}
			}
		}
	}
	return message
}

// NewProtoGetCarbonReportResponse builds the gRPC response type from the
// result of the "get_carbon_report" endpoint of the "calc" service.
func NewProtoGetCarbonReportResponse() *calcpb.GetCarbonReportResponse {
	message := &calcpb.GetCarbonReportResponse{}
	return message
}

// ValidateHandleRequestsRequest runs the validations defined on
// HandleRequestsRequest.
func ValidateHandleRequestsRequest(message *calcpb.HandleRequestsRequest) (err error) {
	if message.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Duration", "message"))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message", string(message.Org), goa.FormatUUID))

	if message.Duration != nil {
		if err2 := ValidatePeriod(message.Duration); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUUID runs the validations defined on UUID.
func ValidateUUID(message string) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message", message, goa.FormatUUID))

	return
}

// ValidatePeriod runs the validations defined on Period.
func ValidatePeriod(message *calcpb.Period) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.StartTime", message.StartTime, goa.FormatDateTime))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.EndTime", message.EndTime, goa.FormatDateTime))

	return
}

// protobufCalcpbPeriodToCalcPeriod builds a value of type *calc.Period from a
// value of type *calcpb.Period.
func protobufCalcpbPeriodToCalcPeriod(v *calcpb.Period) *calc.Period {
	res := &calc.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}

// svcCalcPeriodToCalcpbPeriod builds a value of type *calcpb.Period from a
// value of type *calc.Period.
func svcCalcPeriodToCalcpbPeriod(v *calc.Period) *calcpb.Period {
	res := &calcpb.Period{
		StartTime: v.StartTime,
		EndTime:   v.EndTime,
	}

	return res
}

// svcCalcPowerStampToCalcpbPowerStamp builds a value of type
// *calcpb.PowerStamp from a value of type *calc.PowerStamp.
func svcCalcPowerStampToCalcpbPowerStamp(v *calc.PowerStamp) *calcpb.PowerStamp {
	res := &calcpb.PowerStamp{
		Time:          v.Time,
		GeneratedRate: v.GeneratedRate,
	}

	return res
}

// protobufCalcpbPowerStampToCalcPowerStamp builds a value of type
// *calc.PowerStamp from a value of type *calcpb.PowerStamp.
func protobufCalcpbPowerStampToCalcPowerStamp(v *calcpb.PowerStamp) *calc.PowerStamp {
	res := &calc.PowerStamp{
		Time:          v.Time,
		GeneratedRate: v.GeneratedRate,
	}

	return res
}
