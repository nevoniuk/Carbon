// Code generated by goa v3.7.6, DO NOT EDIT.
//
// design gRPC client CLI support package
//
// Command:
// $ goa gen github.com/crossnokaye/carbon/services/calc/design

package cli

import (
	"flag"
	"fmt"
	"os"

	calcc "github.com/crossnokaye/carbon/services/calc/gen/grpc/calc/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `calc (calculate-reports|get-control-points|get-power|get-emissions|handle-requests|carbonreport)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` calc calculate-reports` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		calcFlags = flag.NewFlagSet("calc", flag.ContinueOnError)

		calcCalculateReportsFlags = flag.NewFlagSet("calculate-reports", flag.ExitOnError)

		calcGetControlPointsFlags = flag.NewFlagSet("get-control-points", flag.ExitOnError)

		calcGetPowerFlags = flag.NewFlagSet("get-power", flag.ExitOnError)

		calcGetEmissionsFlags = flag.NewFlagSet("get-emissions", flag.ExitOnError)

		calcHandleRequestsFlags = flag.NewFlagSet("handle-requests", flag.ExitOnError)

		calcCarbonreportFlags = flag.NewFlagSet("carbonreport", flag.ExitOnError)
	)
	calcFlags.Usage = calcUsage
	calcCalculateReportsFlags.Usage = calcCalculateReportsUsage
	calcGetControlPointsFlags.Usage = calcGetControlPointsUsage
	calcGetPowerFlags.Usage = calcGetPowerUsage
	calcGetEmissionsFlags.Usage = calcGetEmissionsUsage
	calcHandleRequestsFlags.Usage = calcHandleRequestsUsage
	calcCarbonreportFlags.Usage = calcCarbonreportUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "calc":
			svcf = calcFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "calc":
			switch epn {
			case "calculate-reports":
				epf = calcCalculateReportsFlags

			case "get-control-points":
				epf = calcGetControlPointsFlags

			case "get-power":
				epf = calcGetPowerFlags

			case "get-emissions":
				epf = calcGetEmissionsFlags

			case "handle-requests":
				epf = calcHandleRequestsFlags

			case "carbonreport":
				epf = calcCarbonreportFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "calc":
			c := calcc.NewClient(cc, opts...)
			switch epn {
			case "calculate-reports":
				endpoint = c.CalculateReports()
				data = nil
			case "get-control-points":
				endpoint = c.GetControlPoints()
				data = nil
			case "get-power":
				endpoint = c.GetPower()
				data = nil
			case "get-emissions":
				endpoint = c.GetEmissions()
				data = nil
			case "handle-requests":
				endpoint = c.HandleRequests()
				data = nil
			case "carbonreport":
				endpoint = c.Carbonreport()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// calcUsage displays the usage of the calc command and its subcommands.
func calcUsage() {
	fmt.Fprintf(os.Stderr, `Service is the calc service interface.
Usage:
    %[1]s [globalflags] calc COMMAND [flags]

COMMAND:
    calculate-reports: helper method to make kW/lbs of Co2 report
    get-control-points: This endpoint will retrieve the control points for a facility
    get-power: This endpoint will retrieve the power data using control points from the past-values service
    get-emissions: This endpoint will retrieve the emissions data for a facility
    handle-requests: This endpoint is used by a front end service to return energy usage information
    carbonreport: Make reports available to external/R&D clients

Additional help:
    %[1]s calc COMMAND --help
`, os.Args[0])
}
func calcCalculateReportsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc calculate-reports

helper method to make kW/lbs of Co2 report

Example:
    %[1]s calc calculate-reports
`, os.Args[0])
}

func calcGetControlPointsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc get-control-points

This endpoint will retrieve the control points for a facility

Example:
    %[1]s calc get-control-points
`, os.Args[0])
}

func calcGetPowerUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc get-power

This endpoint will retrieve the power data using control points from the past-values service

Example:
    %[1]s calc get-power
`, os.Args[0])
}

func calcGetEmissionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc get-emissions

This endpoint will retrieve the emissions data for a facility

Example:
    %[1]s calc get-emissions
`, os.Args[0])
}

func calcHandleRequestsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc handle-requests

This endpoint is used by a front end service to return energy usage information

Example:
    %[1]s calc handle-requests
`, os.Args[0])
}

func calcCarbonreportUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc carbonreport

Make reports available to external/R&D clients

Example:
    %[1]s calc carbonreport
`, os.Args[0])
}
