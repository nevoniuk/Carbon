// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Data Service API gRPC client CLI support package
//
// Command:
// $ goa gen smartservice/design

package cli

import (
	"flag"
	"fmt"
	"os"
	datac "smartservice/gen/grpc/data/client"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `data (carbon-emissions|fuels|get-aggregate-data)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` data carbon-emissions --message '{
      "field": [
         "Id error.",
         "Consequatur quos similique."
      ]
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		dataFlags = flag.NewFlagSet("data", flag.ContinueOnError)

		dataCarbonEmissionsFlags       = flag.NewFlagSet("carbon-emissions", flag.ExitOnError)
		dataCarbonEmissionsMessageFlag = dataCarbonEmissionsFlags.String("message", "", "")

		dataFuelsFlags       = flag.NewFlagSet("fuels", flag.ExitOnError)
		dataFuelsMessageFlag = dataFuelsFlags.String("message", "", "")

		dataGetAggregateDataFlags       = flag.NewFlagSet("get-aggregate-data", flag.ExitOnError)
		dataGetAggregateDataMessageFlag = dataGetAggregateDataFlags.String("message", "", "")
	)
	dataFlags.Usage = dataUsage
	dataCarbonEmissionsFlags.Usage = dataCarbonEmissionsUsage
	dataFuelsFlags.Usage = dataFuelsUsage
	dataGetAggregateDataFlags.Usage = dataGetAggregateDataUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "data":
			svcf = dataFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "data":
			switch epn {
			case "carbon-emissions":
				epf = dataCarbonEmissionsFlags

			case "fuels":
				epf = dataFuelsFlags

			case "get-aggregate-data":
				epf = dataGetAggregateDataFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "data":
			c := datac.NewClient(cc, opts...)
			switch epn {
			case "carbon-emissions":
				endpoint = c.CarbonEmissions()
				data, err = datac.BuildCarbonEmissionsPayload(*dataCarbonEmissionsMessageFlag)
			case "fuels":
				endpoint = c.Fuels()
				data, err = datac.BuildFuelsPayload(*dataFuelsMessageFlag)
			case "get-aggregate-data":
				endpoint = c.GetAggregateData()
				data, err = datac.BuildGetAggregateDataPayload(*dataGetAggregateDataMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// dataUsage displays the usage of the data command and its subcommands.
func dataUsage() {
	fmt.Fprintf(os.Stderr, `Service that provides forecasts to clickhouse from Carbonara API
Usage:
    %[1]s [globalflags] data COMMAND [flags]

COMMAND:
    carbon-emissions: query api getting search data for carbon_intensity event
    fuels: query api using a search call for a fuel event
    get-aggregate-data: get the aggregate data for an event

Additional help:
    %[1]s data COMMAND --help
`, os.Args[0])
}
func dataCarbonEmissionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] data carbon-emissions -message JSON

query api getting search data for carbon_intensity event
    -message JSON: 

Example:
    %[1]s data carbon-emissions --message '{
      "field": [
         "Id error.",
         "Consequatur quos similique."
      ]
   }'
`, os.Args[0])
}

func dataFuelsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] data fuels -message JSON

query api using a search call for a fuel event
    -message JSON: 

Example:
    %[1]s data fuels --message '{
      "field": [
         "Illo et sint.",
         "Saepe libero."
      ]
   }'
`, os.Args[0])
}

func dataGetAggregateDataUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] data get-aggregate-data -message JSON

get the aggregate data for an event
    -message JSON: 

Example:
    %[1]s data get-aggregate-data --message '{
      "field": "Eos et fugiat voluptatibus cupiditate."
   }'
`, os.Args[0])
}
