// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Data gRPC client CLI support package
//
// Command:
// $ goa gen smartservice/design

package client

import (
	"encoding/json"
	"fmt"
	datapb "smartservice/gen/grpc/data/pb"
)

// BuildCarbonEmissionsPayload builds the payload for the Data carbon_emissions
// endpoint from CLI flags.
func BuildCarbonEmissionsPayload(dataCarbonEmissionsMessage string) ([]string, error) {
	var err error
	var message datapb.CarbonEmissionsRequest
	{
		if dataCarbonEmissionsMessage != "" {
			err = json.Unmarshal([]byte(dataCarbonEmissionsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"field\": [\n         \"Id error.\",\n         \"Consequatur quos similique.\"\n      ]\n   }'")
			}
		}
	}
	v := make([]string, len(message.Field))
	for i, val := range message.Field {
		v[i] = val
	}
	return v, nil
}

// BuildFuelsPayload builds the payload for the Data fuels endpoint from CLI
// flags.
func BuildFuelsPayload(dataFuelsMessage string) ([]string, error) {
	var err error
	var message datapb.FuelsRequest
	{
		if dataFuelsMessage != "" {
			err = json.Unmarshal([]byte(dataFuelsMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"field\": [\n         \"Illo et sint.\",\n         \"Saepe libero.\"\n      ]\n   }'")
			}
		}
	}
	v := make([]string, len(message.Field))
	for i, val := range message.Field {
		v[i] = val
	}
	return v, nil
}

// BuildGetAggregateDataPayload builds the payload for the Data
// get_aggregate_data endpoint from CLI flags.
func BuildGetAggregateDataPayload(dataGetAggregateDataMessage string) (string, error) {
	var err error
	var message datapb.GetAggregateDataRequest
	{
		if dataGetAggregateDataMessage != "" {
			err = json.Unmarshal([]byte(dataGetAggregateDataMessage), &message)
			if err != nil {
				var zero string
				return zero, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"field\": \"Eos et fugiat voluptatibus cupiditate.\"\n   }'")
			}
		}
	}
	v := message.Field
	return v, nil
}
