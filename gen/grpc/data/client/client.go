// Code generated by goa v3.7.6, DO NOT EDIT.
//
// Data gRPC client
//
// Command:
// $ goa gen smartservice/design

package client

import (
	"context"
	datapb "smartservice/gen/grpc/data/pb"

	goagrpc "goa.design/goa/v3/grpc"
	goapb "goa.design/goa/v3/grpc/pb"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli datapb.DataClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the Data service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: datapb.NewDataClient(cc),
		opts:    opts,
	}
}

// CarbonEmissions calls the "CarbonEmissions" function in datapb.DataClient
// interface.
func (c *Client) CarbonEmissions() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildCarbonEmissionsFunc(c.grpccli, c.opts...),
			EncodeCarbonEmissionsRequest,
			DecodeCarbonEmissionsResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// Fuels calls the "Fuels" function in datapb.DataClient interface.
func (c *Client) Fuels() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildFuelsFunc(c.grpccli, c.opts...),
			EncodeFuelsRequest,
			DecodeFuelsResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// GetAggregateData calls the "GetAggregateData" function in datapb.DataClient
// interface.
func (c *Client) GetAggregateData() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGetAggregateDataFunc(c.grpccli, c.opts...),
			EncodeGetAggregateDataRequest,
			DecodeGetAggregateDataResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}
